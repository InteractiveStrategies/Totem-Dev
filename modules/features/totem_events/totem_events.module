<?php

/**
 * @file
 * totem_events.module
 */

require_once 'totem_events.features.inc';
require_once 'includes/totem_events.theme.inc';
require_once 'includes/totem_events.block.inc';
include_once 'includes/totem_events.form.inc';

// Hook implementations.
/**
 * Implements hook_url_outbound_alter().
 */
function totem_events_url_outbound_alter(&$path, &$options, $original_path) {
  _totem_common_url_outbound_alter($path, $options, $original_path, 'event', 'events');
}
/**
 * Implements hook_theme_registry_alter().
 */
function totem_events_theme_registry_alter(&$theme_registry) {
  $path = drupal_get_path('module', 'totem_events');
  _totem_common_theme_registry_alter($theme_registry, $path);
}

// Hook implementations (Features).
/**
 * Implements hook_node_community_ENTITY_TYPE().
 */
function totem_events_node_community_event($vars) {

  $efq_params = array(
    'entity_type' => 'node',
    'bundle' => 'event',
    'field_conditions' => array(
      array('field' => 'field_community', 'column' => 'target_id', 'value' => $vars['node']->nid),
    ),
    'page_limit' => (!empty($vars['page_limit']) ? $vars['page_limit'] : NULL),
    'property_order_by' => array(
      array('column' => 'changed', 'direction' => 'DESC'),
    ),
    'view_mode' => 'teaser',
  );

  $efq_params = array_merge($efq_params, $vars);

  // Allow modules to alter params.
  if ($efq_params['view_mode'] == 'teaser') {
    $efq_param_type = 'search';
    drupal_alter('totem_common_EFQ_params', $efq_params, $efq_param_type);
  }

  $items['nodes'] = array(
    'query' => _totem_common_efq($efq_params),
  );

  return $items;
}
/**
 * Implements hook_node_community_ENTITY_TYPE_entity().
 */
function totem_events_node_community_event_entity($vars) {

  $efq_params = array(
    'view_mode' => 'full',
    'property_conditions' => array(
      array('column' => 'nid', 'value' => $vars['entity_id']),
    ),
  );

  $efq_params = array_merge($efq_params, $vars);

  return module_invoke('totem_events', 'node_community_event', $efq_params);
}
/**
 * Implements hook_user_community_ENTITY_TYPE().
 */
function totem_events_user_community_event($vars) {

  // Get user's list of active Community nids.
  $nid_community = _totem_common_get_field_entityreference_values('user', $vars['account'], 'field_community');
  if (empty($nid_community)) {
    return NULL;
  }

  $efq_params = array(
    'entity_type' => 'node',
    'bundle' => 'event',
    'property_conditions' => array(
      array('column' => 'uid', 'value' => $vars['account']->uid),
    ),
    'field_conditions' => array(
      array('field' => 'field_community', 'column' => 'target_id', 'value' => $nid_community),
    ),
    'page_limit' => (!empty($vars['page_limit']) ? $vars['page_limit'] : PAGE_SIZE_LISTS_PAGE),
    'property_order_by' => array(
      array('column' => 'changed', 'direction' => 'DESC'),
    ),
  );

  $items['nodes'] = array(
    'query' => _totem_common_efq($efq_params),
  );

  return $items;
}
/**
 * Implements hook_totem_common_EFQ_params_alter().
 */
function totem_events_totem_common_EFQ_params_alter(&$vars, $type) {

  switch ($type) {
    case 'search':
      // Get querystring args.
      $args = drupal_get_query_parameters();
      if (empty($args)) {
        return FALSE;
      }

      if (!empty($args['date'])) {
        $vars['field_conditions'][] = array(
          'field' => 'field_dates',
          'column' => 'value',
          'value' => array(
            date('Y-m-d H:i:s', strtotime($args['date'])),
            date('Y-m-d H:i:s', strtotime($args['date'] . '+ 1 month')),
          ),
          'operator' => 'BETWEEN',
        );
      }
      break;

    // Alter params in common menu callback totem_common_page_content_list().
    case 'content_list':
      if ($vars['bundle'] == 'event') {
        // Remove order by last changed.
        $vars['property_order_by'] = array();
        // Add order by event date instead.
        $vars['field_order_by'] = array(
          array('field' => 'field_dates', 'column' => 'value', 'direction' => 'ASC'),
        );
      }
      break;
  }
}
